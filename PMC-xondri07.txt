Architektury Výpočetních Systémů (AVS 2021)
Projekt č. 2 (PMC)
Login: xondri07

Úloha 1: Paralelizace původního řešení
===============================================================================

1) Kterou ze smyček (viz zadání) je vhodnější paralelizovat a co způsobuje 
   neefektivitu paralelizaci té druhé?

Vhodnější je paralelizovat marchCubes, protože je menší podíl režie vůči práci.
V evaluateFieldAt žije každé vlákno pouze krátkou chvíli, a tudíž převažuje režie
vláken.

2) Jaké plánování (rozdělení práce mezi vlákna) jste zvolili a proč? 
   Jaký vliv má velikost "chunk" při dynamickém plánování (8, 16, 32, 64)?

Přibližná měření pro ../data/bun_zipper_res4.pts bun_zipper_res4.obj:
static : 30 - 50 ms
guided : 29 - 56 ms
dynamic,8 : 31 - 43 ms
dynamic,16 : 30 - 45 ms
dynamic,32 : 32 - 59 ms
dynamic,64 : 27 - 37 ms

Nejlepší volbou se zdá být dynamic,64. Rozdíly však nejsou podstatné.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?

Přidávání do vektoru trojúhelníku je kritická sekce, tudíž je potřeba zajistit
výlučný přístup. To je možné označit pragmou jako kritickou sekci.

Alternativní a efektivnější je vytvořit pomocná pole pro každé vlákno a na
konci marchCubes sesypat trojúhelníky do jednoho vektoru.


Úloha 2: Paralelní průchod stromem
===============================================================================

1) Stručně popište použití OpenMP tasků ve vašem řešení.

Nejprve jsem definoval paralelní sekci uvnitř které jsem spustil
rekurzivní marchCubes pouze jediným vláknem (single).

Při dělení krychle na 8 podkrychlí se výpočet každé podkrychle spočítá
v rámci jednoho tasku. Hned za vytvořením těchto tasků musí být taskwait,
který zajistí, že se nebude pokračovat, pokud se vytvořené tasky neprovedou.

2) Jakým způsobem jste realizovali sesbírání celkového počtu trojúhelníků?

Trojúhelníky ukládá každé vlákno do svého pole, které se na konci sesypou
do jediného pole. Celkový počet trojúhelníků je zjištěn voláním metody
size() nad vektorem s trojúhelníky. Přičítat do proměnné není potřeba.

3) Jaký vliv má na vaše řešení tzv. "cut-off"? Je vhodné vytvářet nový 
   task pro každou krychli na nejnižší úrovni?

Nastavení cut-off zamezí příliš velkému množství vytvořených tasků, protože
každý task přináší jistou režii. Při zanořování exponenciálně vzrůstá počet vytvořených
tasků, tudíž je vhodné omezit zahoření jen do určité úrovně. Pro moji
implementaci se jedná o hodnotu mGridSize / 2^4.

4) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?

Ukládání do vektoru trojúhelníku je označeno jako kritická sekce, která zabrání
souběžnému přístupu dvou vláken do tohoto vektoru.

Každé vlákno má své pole do kterého ukládá, tudíž není třeba řešit výlučný
přístup do jediného pole. Na konci marchCubes se jednoduše trojúhelníky
ze všech polí sjednotí do jediného vektoru.

Úloha 3: Grafy škálování všech řešení
===============================================================================

1) Stručně zhodnoťte efektivitu vytvořených řešení (na základě grafů škálování).

U silného škálování je vidět, že pro počet jader větší než 2^4 algoritmy špatně škálují.
Čas potřebný na provedení úlohy je s více jádry totožný či dokonce vyšší. Nejlepšího času
dosahují algoritmy pro 16 jader.

Z grafu škálování vzhledem k velikosti mřížky je vidět, že implemenatce Octree
je pro menší mřížku pomalejší. Asi od velikosti mřížky 2^18 jsou implementace
totožné a čas roste s velikostí mřížky přibližně lineárně.

2) V jakém případě (v závislosti na počtu bodů ve vstupním souboru a velikosti 
   mřížky) bude vaše řešení 1. úlohy neefektivní? (pokud takový případ existuje)

Řešení Loop nebude efektivní v případě malého vstupu a velkého počtu jader.

3) Je (nebo není) stromový algoritmus efektivnější z pohledu slabého škálování 
   vzhledem ke vstupu?

Je efektivnější z pohledu slabého škálování, ale jedná se pouze o těžce rozeznatelný rozdíl.
O stromového algoritmu jsou linky pouze lehce více horizontální než o implementace loop.

Úloha 4: Analýza využití jader pomocí VTune
================================================================================

1) Jaké bylo průměrné využití jader pro všechny tři implementace s omezením na 
   18 vláken? Na kolik procent byly využity?
Průměrné využití:
   ref: 0.996
   loop: 15.536
   tree: 15.243
   
Procentuální využití:
   ref:   0.996 / 18 * 100 = 5.533 %
   loop: 15.536 / 18 * 100 = 86.311 %
   tree: 15.243 / 18 * 100 = 84,683 %

2) Jaké bylo průměrné využití jader pro všechny tři implementace s využitím 
   všech jader? Na kolik procent se podařilo využít obě CPU?
   
Průměrné využití:
   ref: 0.996
   loop: 22.253
   tree: 21.229

Procentuální využití:
   ref:   2,8 %
   loop: 62.8 %
   tree: 59,4 %

3) Jaké jsou závěry z těchto měření?

Lepší využití dosáhneme při použití jednoho procesoru s 18 vlákny. 

